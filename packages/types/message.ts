import type {
  EntityMetadata,
  UserID,
  Location,
  TimestampRange,
} from './core.js';
import type { PaginationDetails } from './pagination.js';
import type {
  CreateAttachment,
  RemoveAttachment,
  ServerCreateThread,
  SortDirection,
} from './thread.js';
import type { UploadedFile } from './file.js';
import type { MessageContent } from './messageNodes.js';

export type Reaction = {
  /**
   * The emoji reaction.
   */
  reaction: string;
  /**
   * The ID of the user who reacted to the message.
   */
  userID: UserID;
  /**
   *  The timestamp of when the reaction was created.
   */
  timestamp: Date;
};

export type ServerAddReactions = Omit<Reaction, 'timestamp'> &
  Partial<Pick<Reaction, 'timestamp'>>;

export type ServerRemoveReactions = Omit<Reaction, 'timestamp'>;

/**
 * A file attached to this message.
 */
export interface MessageFileAttachment extends UploadedFile {
  /**
   * The type of this attachment, which is always `file` for file attachments.
   */
  type: 'file';
}

/**
 * The screenshot attached to this message.
 */
export interface MessageScreenshotAttachment {
  /**
   * The type of this attachment, which is always `screenshot` for screenshot attachments.
   */
  type: 'screenshot';
  /**
   * The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen`
   * API.
   */
  screenshot: UploadedFile;
}

/**
 * The custom annotation data attached to an annotation.  This information is
 * what was returned by your custom annotation callbacks.  For more information,
 * see the documentation on the [Annotations
 * API](https://docs.cord.com/js-apis-and-hooks/annotations-api).
 */
export type CustomAnnotationData = {
  /**
   * The custom location you produced for this annotation at annotation capture
   * time.
   */
  location: Location;
  /**
   * The offset of the annotation relative to the element identified by
   * `location`, in pixels, at the time the annotation was captured.  The
   * `location` and `coordsRelativeToTarget` will be supplied to the
   * [Annotations API render
   * handler](https://docs.cord.com/js-apis-and-hooks/annotations-api#setRenderHandler-2)
   * in order to position the annotation.
   */
  coordsRelativeToTarget: { x: number; y: number };
  /**
   * Your custom user-visible label for the annotation, if any.
   */
  label: string | null;
};

/**
 * An annotation attached to this message.
 */
export interface MessageAnnotationAttachment {
  /**
   * The type of this attachment, which is always `annotation` for annotation attachments.
   */
  type: 'annotation';
  /**
   * The screenshot attached to the annotation, if any.
   */
  screenshot: UploadedFile | null;
  /**
   * The opaque location data generated by Cord.  This field may or may not be
   * set, depending on how the annotation was created.  The value will be an
   * opaque string that can be passed to
   * [`stringToViewportCoordinates`](https://docs.cord.com/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).
   */
  locationData: string | null;
  /**
   * The custom location data for this annotation.  This will only be set if
   * you're using the [Annotations
   * API](https://docs.cord.com/js-apis-and-hooks/annotations-api) to customize
   * your annotation locations.
   */
  customData: CustomAnnotationData | null;
  /**
   * The text that was selected when creating the annotation, if any.
   */
  textContent: string | null;
}

export type MessageAttachment =
  | MessageFileAttachment
  | MessageAnnotationAttachment
  | MessageScreenshotAttachment
  | MessageLinkPreviewAttachment;

export interface MessageLinkPreviewAttachment {
  /**
   * The type of this attachment, which is always `link_preview` for file link previews.
   */
  type: 'link_preview';
  /**
   * The ID of the link preview attachment.
   */
  id: string;
  /**
   * The url from which the preview was generated.
   */
  url: string;
  /**
   * URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.
   */
  imageURL: string | null;
  /**
   * Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.
   */
  title: string | null;
  /**
   * Description for the link preview. Generated from the url provided from meta or og tags in the page.
   */
  description: string | null;
}

export interface CoreMessageData {
  /**
   * The ID for the message.  If a message is created with no ID, a random
   * UUID-based ID will be automatically created for it.
   */
  id: string;
  /**
   * The ID for the user that sent the message.
   */
  authorID: string;
  /**
   * The ID for the organization this message belongs to.
   * @deprecated Use groupID instead.
   */
  organizationID: string;
  /**
   * The ID for the group this message belongs to.
   */
  groupID: string;
  /**
   * The ID for the thread this message is part of.
   */
  threadID: string;
  /**
   * The content of the message.
   */
  content: MessageContent;
  /**
   * A plaintext version of the structured message content.
   */
  plaintext: string;
  /**
   * A URL where the message can be seen.  This determines where a user is sent
   * when they click on a reference to this message, such as in a notification.
   * If unset, it defaults to the thread's URL.
   */
  url: string | null;
  /**
   * The timestamp when this message was created.  The default value is the
   * current time.
   */
  createdTimestamp: Date;
  /**
   * The timestamp when this message was deleted, if it was.  If unset, the
   * message is not deleted.
   */
  deletedTimestamp: Date | null;
  /**
   * The timestamp when this message was last edited, if it ever was.  If unset,
   * the message does not show as edited.
   */
  updatedTimestamp: Date | null;
  /**
   * The URL of the icon to show next to the message.  This is only used for
   * `action_message` messages; other messages show the avatar of the author.
   * If an `action_message` does not have an icon set, no icon is shown.
   * @format uri
   */
  iconURL: string | null;
  /**
   * An optional translation key used for this message.  This is useful for
   * system-generated messages where you might want to translate or customize
   * them at runtime.  See [the translations
   * documentation](https://docs.cord.com/customization/translations) for more
   * information.
   */
  translationKey: string | null;
  /**
   * The type of message this is.  A `user_message` is a message that the author
   * sent.  An `action_message` is a message about something that happened, such
   * as the thread being resolved.  The default value is `user_message`.
   */
  type: 'action_message' | 'user_message';
  /**
   * Arbitrary key-value pairs that can be used to store additional information.
   */
  metadata: EntityMetadata;
  /**
   * A optional space separated list of classnames to add to the message.
   */
  extraClassnames: string | null;
  /**
   * The items attached to this message.
   */
  attachments: MessageAttachment[];
  /**
   * The reactions to this message.
   */
  reactions: Reaction[];
  /**
   * A list of IDs of the users that have seen the message.
   */
  seenBy: string[];
  /**
   * If set, Cord won't analyze links in the message to generate previews.
   */
  skipLinkPreviews: boolean;
}

export interface ClientMessageData extends CoreMessageData {
  /**
   * Whether the message has been seen by the current viewer.
   */
  seen: boolean;
}
export type MessageCallback = (
  data: ClientMessageData | null | undefined,
) => unknown;

export interface SearchResultData extends ClientMessageData {
  location: Location;
}

export type SearchSortByOptions = 'created_timestamp' | 'relevance';
export interface SearchOptionsType {
  /**
   * The string you want to find in message content.
   */
  textToMatch?: string;
  /**
   * The user ID of the person who sent the message.
   */
  authorID?: string;
  /**
   * The org ID of the organization the message belongs to.
   * If omitted, the search will be across all orgs the current user is a member of.
   * @deprecated Use groupID instead.
   */
  orgID?: string;
  /**
   * The ID of the group the message belongs to.
   * If omitted, the search will be across all groups the current user is a member of.
   */
  groupID?: string;
  /**
   * Arbitrary key-value pairs of data associated with the message.
   */
  metadata?: EntityMetadata;
  /**
   * Location to filter the messages by.
   *
   * Set locationOptions.location to a specific thread location to search.
   * If locationOptions.partialMatch is `true`, we perform [partial
   * matching](https://docs.cord.com/reference/location#Partial-Matching) on the
   * specified location. If `false`, we fetch information only from the
   * specified location.
   * @returns An array containing message objects.
   */
  locationOptions?: { location: Location; partialMatch: boolean };
  /**
   * Optional date objects used to scope search.
   */
  timestampRange?: TimestampRange;
  /**
   * Number of messages to return. This will default to 50 if no value is provided
   * but will be capped at 1000 if a value is provided.
   */
  limit?: number;
  /**
   * Sort the messages returned based on either their creation timestamp or relevance.
   * Relevance refers to how closely the provided `textToMatch` string matches the content
   * of the messages.
   * Combine this with `sortDirection` to fine-tune the sorting order.
   *
   * By default, sorting is performed by `relevance` if `textToMatch` is provided, but will
   * fallback to `created_timestamp` if it's not.
   */
  sortBy?: SearchSortByOptions;
  /**
   * Property to control the order in which the messages returned are sorted.
   * Using `sortBy` value of `relevance` and `sortDirection` of `descending` are the
   * best options for getting the most relevant results at the top and is the
   * default sorting criteria.
   *
   * The default value for this is 'descending'.
   */
  sortDirection?: SortDirection;
}

export interface ServerCreateMessage
  // Pick the required properties
  extends Pick<CoreMessageData, 'authorID' | 'content'>,
    // Then a partial version of the rest of the properties
    Partial<
      Omit<
        CoreMessageData,
        // Required fields
        | 'authorID'
        | 'content'
        // Fields that are readonly
        | 'organizationID'
        | 'groupID'
        | 'threadID'
        | 'plaintext'
        | 'reactions'
        | 'attachments'
        | 'seenBy'
      >
    > {
  /**
   * The reactions you want to add to this message.
   * The default timestamp is the current time.
   * Trying to create a reaction that already exists for a user does nothing.
   * Doing the same as before with a timestamp will update the reaction with the new timestamp.
   * The reaction users need to be an [active member of the group](https://docs.cord.com/rest-apis/groups#Update-group-members) that the message and thread belong to.
   */
  addReactions?: ServerAddReactions[];
  /**
   * A list of attachments to add to the message.  The same file cannot be
   * attached to the same message multiple times.
   */
  addAttachments?: CreateAttachment[];
  /**
   * The parameters for creating a thread if the supplied thread doesn't exist
   * yet.  If the thread doesn't exist but `createThread` isn't provided, the
   * call will generate an error.  This value is ignored if the thread already
   * exists.
   */
  createThread?: Omit<ServerCreateThread, 'id'>;
  /**
   * Whether to subscribe the sender of the message to the thread, so that they
   * get notified about replies.  If not specified, defaults to `true`.  If
   * false, the user's subscription status will be left unchanged.
   */
  subscribeToThread?: boolean;
}

export interface ServerUpdateMessage
  extends Partial<
    Omit<ServerCreateMessage, 'createThread' | 'subscribeToThread'>
  > {
  /**
   * Whether we want to mark this message as deleted. Setting this to `true` without
   * providing a value for `deletedTimestamp` is equivalent to setting `deletedTimestamp` to current
   * time and setting this to `false` is equivalent to setting `deletedTimestamp` to `null`.
   */
  deleted?: boolean;
  /**
   * The timestamp when this message was deleted, if it was. If set to null, the message is not deleted.
   * Deleting a message this way will only soft delete it, replacing the content of the message with a
   * record of the deletion on the frontend. If you'd like to permanently delete it instead, use the
   * [delete message endpoint](https://docs.cord.com/rest-apis/messages#Delete-a-message).
   */
  deletedTimestamp?: Date | null;
  /**
   * The reactions you want to remove from this message.
   * Removing a reaction that does not exist will have no effect and will not return an error.
   * An error is returned if a reaction is both added and deleted in the same request.
   */
  removeReactions?: ServerRemoveReactions[];
  /**
   * The attachments you want to remove from this message.  Removing an
   * attachment that doesn't exist has no effect and won't return an error.
   * Attempting to add and remove the same attachment in one request is an
   * error.
   */
  removeAttachments?: RemoveAttachment[];
}

export interface ServerListThreadMessageParameters {
  /**
   * Return messages in ascending or descending order of creation timestamp.  'descending' is the default.
   */
  sortDirection?: 'ascending' | 'descending';
}

export type ServerListMessageFilter = {
  /**
   * Arbitrary key-value pairs of data associated with the message.
   */
  metadata?: EntityMetadata;
  /**
   * The [location](https://docs.cord.com/reference/location) of the thread containing the message.
   */
  location?: string;
  /**
   * If provided, will return messages created by this author.
   */
  authorID?: string;
};
export interface ServerListMessageParameters {
  /**
   * Number of messages to return. Defaults to 1000.
   */
  limit?: number;

  /**
   * Pagination token. This is returned in the `pagination` object of a previous response.
   */
  token?: string;

  /**
   * Messages will be matched against the filters specified.
   * This is a partial match, which means any keys other than the ones you specify are ignored
   * when checking for a match. Please note that because this is a query parameter in a REST API,
   * this JSON object must be URI encoded before being sent.
   */
  filter?: ServerListMessageFilter;
}

export interface ServerListMessages {
  /**
   * Page containing messages.
   */
  messages: CoreMessageData[];
  /**
   * Data related to cursor-based pagination.
   */
  pagination: PaginationDetails;
}

export interface ServerAppendMessage {
  /**
   * The text that will be appended to the markdown node in the message.
   */
  text: string;
}
