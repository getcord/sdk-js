{
  "ApplicationData": {
    "type": "object",
    "properties": {
      "id": { "description": "The ID for the application.", "type": "string" },
      "name": {
        "description": "Name of the application",
        "minLength": 1,
        "type": "string"
      },
      "iconURL": {
        "description": "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.",
        "format": "uri",
        "type": ["null", "string"]
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["id", "name", "iconURL"],
    "required": ["iconURL", "id", "name"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreateApplicationVariables": {
    "description": "https://docs.cord.com/reference/rest-api/applications/",
    "type": "object",
    "properties": {
      "name": {
        "description": "Name of the application",
        "minLength": 1,
        "type": "string"
      },
      "iconURL": {
        "description": "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.",
        "format": "uri",
        "type": ["null", "string"]
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["name", "iconURL"],
    "required": ["name"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateApplicationVariables": {
    "description": "https://docs.cord.com/reference/rest-api/applications/",
    "type": "object",
    "properties": {
      "name": {
        "description": "Name of the application",
        "minLength": 1,
        "type": "string"
      },
      "iconURL": {
        "description": "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.",
        "format": "uri",
        "type": ["null", "string"]
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["name", "iconURL"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "DeleteApplicationVariables": {
    "type": "object",
    "properties": {
      "secret": {
        "description": "Secret key of the application that you want to delete. This can be found\nwithin the Cord Console.",
        "minLength": 1,
        "type": "string"
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["secret"],
    "required": ["secret"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PlatformOrganizationVariables": {
    "type": "object",
    "properties": {
      "name": { "description": "Organization name", "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "members": {
        "description": "List of partner-specific IDs of the users who are members of this organization",
        "type": "array",
        "items": { "type": ["string", "number"] }
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["name", "status", "members"],
    "required": ["name"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdatePlatformOrganizationVariables": {
    "description": "https://docs.cord.com/reference/rest-api/organizations/",
    "type": "object",
    "properties": {
      "name": { "description": "Organization name", "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "members": {
        "description": "List of partner-specific IDs of the users who are members of this organization",
        "type": "array",
        "items": { "type": ["string", "number"] }
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["name", "status", "members"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdatePlatformOrganizationMembersVariables": {
    "description": "https://docs.cord.com/reference/rest-api/organizations/",
    "type": "object",
    "properties": {
      "add": { "type": "array", "items": { "type": ["string", "number"] } },
      "remove": { "type": "array", "items": { "type": ["string", "number"] } }
    },
    "additionalProperties": false,
    "propertyOrder": ["add", "remove"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreatePlatformOrganizationVariables": {
    "additionalProperties": false,
    "type": "object",
    "properties": {
      "name": { "description": "Organization name", "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "members": {
        "description": "List of partner-specific IDs of the users who are members of this organization",
        "type": "array",
        "items": { "type": ["string", "number"] }
      },
      "id": { "$ref": "#/definitions/ID" }
    },
    "required": ["id", "name"],
    "definitions": {
      "ID": { "minLength": 1, "maxLength": 128, "type": ["string", "number"] }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PlatformUserVariables": {
    "type": "object",
    "properties": {
      "email": {
        "description": "Email address",
        "format": "email",
        "type": "string"
      },
      "name": { "description": "Full user name", "type": "string" },
      "shortName": {
        "description": "Short user name. In most cases, this will be preferred over name when set.",
        "type": "string"
      },
      "short_name": { "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "profilePictureURL": {
        "description": "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "profile_picture_url": { "format": "uri", "type": ["null", "string"] },
      "first_name": {
        "description": "User's first name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "last_name": {
        "description": "User's last name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "email",
      "name",
      "shortName",
      "short_name",
      "status",
      "profilePictureURL",
      "profile_picture_url",
      "first_name",
      "last_name",
      "metadata"
    ],
    "required": ["email"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdatePlatformUserVariables": {
    "description": "https://docs.cord.com/reference/rest-api/users/",
    "type": "object",
    "properties": {
      "email": {
        "description": "Email address",
        "format": "email",
        "type": "string"
      },
      "name": { "description": "Full user name", "type": "string" },
      "shortName": {
        "description": "Short user name. In most cases, this will be preferred over name when set.",
        "type": "string"
      },
      "short_name": { "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "profilePictureURL": {
        "description": "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "profile_picture_url": { "format": "uri", "type": ["null", "string"] },
      "first_name": {
        "description": "User's first name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "last_name": {
        "description": "User's last name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "email",
      "name",
      "shortName",
      "short_name",
      "status",
      "profilePictureURL",
      "profile_picture_url",
      "first_name",
      "last_name",
      "metadata"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreatePlatformUserVariables": {
    "additionalProperties": false,
    "type": "object",
    "properties": {
      "email": {
        "description": "Email address",
        "format": "email",
        "type": "string"
      },
      "name": { "description": "Full user name", "type": "string" },
      "shortName": {
        "description": "Short user name. In most cases, this will be preferred over name when set.",
        "type": "string"
      },
      "short_name": { "type": "string" },
      "status": { "enum": ["active", "deleted"], "type": "string" },
      "profilePictureURL": {
        "description": "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "profile_picture_url": { "format": "uri", "type": ["null", "string"] },
      "first_name": {
        "description": "User's first name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "last_name": {
        "description": "User's last name. This field is deprecated and has no effect.",
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "id": { "$ref": "#/definitions/ID" }
    },
    "required": ["email", "id"],
    "definitions": {
      "ID": { "minLength": 1, "maxLength": 128, "type": ["string", "number"] }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ListUserQueryParameters": {
    "type": "object",
    "properties": {
      "filter": {
        "description": "This is a JSON object with one optional entry.  Users will be matched\nagainst the filter specified. This is a partial match, which means any keys\nother than the ones you specify are ignored when checking for a match.\nPlease note that because this is a query parameter in a REST API, this JSON\nobject must be URI encoded before being sent.",
        "$ref": "#/definitions/Pick<FilterParameters,\"metadata\">"
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["filter"],
    "definitions": {
      "Pick<FilterParameters,\"metadata\">": {
        "type": "object",
        "properties": {
          "metadata": {
            "description": "Arbitrary key-value pairs of data associated with the object.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          }
        },
        "additionalProperties": false,
        "propertyOrder": ["metadata"]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "BatchAPIVariables": {
    "description": "https://docs.cord.com/reference/rest-api/batch/",
    "type": "object",
    "properties": {
      "users": {
        "description": "List of user objects. Every object must include the id field. If the user\nalready exists, all other fields are optional and only updated when\npresent. If the user does not already exist, fields are required as\ndescribed in the [Create or update a\nuser](/reference/rest-api/organizations/#create-or-update-an-organization)\nAPI.",
        "maxItems": 10000,
        "type": "array",
        "items": {
          "additionalProperties": false,
          "type": "object",
          "properties": {
            "email": {
              "description": "Email address",
              "format": "email",
              "type": "string"
            },
            "name": { "description": "Full user name", "type": "string" },
            "shortName": {
              "description": "Short user name. In most cases, this will be preferred over name when set.",
              "type": "string"
            },
            "short_name": { "type": "string" },
            "status": { "enum": ["active", "deleted"], "type": "string" },
            "profilePictureURL": {
              "description": "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.",
              "format": "uri",
              "type": ["null", "string"]
            },
            "profile_picture_url": {
              "format": "uri",
              "type": ["null", "string"]
            },
            "first_name": {
              "description": "User's first name. This field is deprecated and has no effect.",
              "type": "string"
            },
            "last_name": {
              "description": "User's last name. This field is deprecated and has no effect.",
              "type": "string"
            },
            "metadata": {
              "description": "Arbitrary key-value pairs that can be used to store additional information.",
              "type": "object",
              "additionalProperties": {
                "type": ["string", "number", "boolean"]
              },
              "propertyOrder": []
            },
            "id": { "$ref": "#/definitions/ID" }
          },
          "required": ["id"]
        }
      },
      "organizations": {
        "description": "List of organization objects. Every object must include the id field. If\nthe organization already exists, all other fields are optional and only\nupdated when present. If the organization does not already exist, fields\nare required as described in the [Create or update an\norganization](/reference/rest-api/organizations/#create-or-update-an-organization)\nAPI.",
        "maxItems": 1000,
        "type": "array",
        "items": {
          "additionalProperties": false,
          "type": "object",
          "properties": {
            "name": { "description": "Organization name", "type": "string" },
            "status": { "enum": ["active", "deleted"], "type": "string" },
            "members": {
              "description": "List of partner-specific IDs of the users who are members of this organization",
              "type": "array",
              "items": { "type": ["string", "number"] }
            },
            "id": { "$ref": "#/definitions/ID" }
          },
          "required": ["id"]
        }
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["users", "organizations"],
    "definitions": {
      "ID": { "minLength": 1, "maxLength": 128, "type": ["string", "number"] }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ThreadData": {
    "type": "object",
    "properties": {
      "id": { "description": "The ID for this thread.", "type": "string" },
      "organizationID": {
        "description": "The organization ID this thread is in.",
        "type": "string"
      },
      "total": {
        "description": "The total number of messages in this thread.",
        "type": "number"
      },
      "resolved": {
        "description": "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.",
        "type": "boolean"
      },
      "resolvedTimestamp": {
        "description": "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "participants": {
        "description": "All of the users who are subscribed to this thread.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "lastSeenTimestamp": {
              "description": "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.",
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            },
            "userID": {
              "description": "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).",
              "type": ["null", "string"]
            }
          },
          "additionalProperties": false,
          "propertyOrder": ["lastSeenTimestamp", "userID"],
          "required": ["lastSeenTimestamp", "userID"]
        }
      },
      "typing": {
        "description": "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.",
        "type": "array",
        "items": { "type": "string" }
      },
      "name": {
        "description": "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.",
        "type": "string"
      },
      "url": {
        "description": "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.",
        "type": "string"
      },
      "location": {
        "description": "The [location](/reference/location) of this thread.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "id",
      "organizationID",
      "total",
      "resolved",
      "resolvedTimestamp",
      "participants",
      "typing",
      "name",
      "url",
      "location",
      "metadata"
    ],
    "required": [
      "id",
      "location",
      "metadata",
      "name",
      "organizationID",
      "participants",
      "resolved",
      "resolvedTimestamp",
      "total",
      "typing",
      "url"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ThreadParticipant": {
    "type": "object",
    "properties": {
      "lastSeenTimestamp": {
        "description": "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "userID": {
        "description": "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).",
        "type": ["null", "string"]
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["lastSeenTimestamp", "userID"],
    "required": ["lastSeenTimestamp", "userID"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateThreadVariables": {
    "description": "https://docs.cord.com/reference/rest-api/threads/",
    "type": "object",
    "properties": {
      "location": {
        "description": "The [location](/reference/location) of this thread.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "id": { "description": "The ID for this thread.", "type": "string" },
      "url": {
        "description": "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.",
        "type": "string"
      },
      "name": {
        "description": "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.",
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "resolvedTimestamp": {
        "description": "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "organizationID": {
        "description": "The organization ID this thread is in.",
        "type": "string"
      },
      "resolved": {
        "description": "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.",
        "type": "boolean"
      },
      "userID": {
        "description": "Certain changes to the thread may post a message into the thread -- in\nparticular, resolving or unresolving a thread posts a message into the\nthread saying \"User un/resolved this thread\". This parameter is the ID of\nthe User who will be listed as the author of that message. It's optional\n-- if no user is specified, then those messages won't get posted.",
        "type": "string"
      },
      "typing": {
        "description": "Marks the specified users as typing in this thread.  The typing indicator\nexpires after 3 seconds, so to continually show the indicator it needs to\nbe called on an interval.  Pass an empty array to clear all users' typing indicators.",
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "location",
      "id",
      "url",
      "name",
      "metadata",
      "resolvedTimestamp",
      "organizationID",
      "resolved",
      "userID",
      "typing"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreateThreadVariables": {
    "type": "object",
    "properties": {
      "location": {
        "description": "The [location](/reference/location) of this thread.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "id": { "description": "The ID for this thread.", "type": "string" },
      "url": {
        "description": "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.",
        "type": "string"
      },
      "name": {
        "description": "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.",
        "type": "string"
      },
      "organizationID": {
        "description": "The organization ID this thread is in.",
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "typing": {
        "description": "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.",
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "location",
      "id",
      "url",
      "name",
      "organizationID",
      "metadata",
      "typing"
    ],
    "required": ["id", "location", "name", "organizationID", "url"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ListThreadQueryParameters": {
    "type": "object",
    "properties": {
      "filter": {
        "description": "This is a JSON object with two optional entries.\nYou may specify both or either. Threads will be matched against the filters specified.\nThis is a partial match, which means any keys other than the ones you specify are ignored\nwhen checking for a match. Please note that because this is a query parameter in a REST API,\nthis JSON object must be URI encoded before being sent.",
        "type": "object",
        "properties": {
          "location": {
            "description": "The location for the thread.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          },
          "metadata": {
            "description": "Arbitrary key-value pairs of data associated with the object.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          }
        },
        "additionalProperties": false,
        "propertyOrder": ["location", "metadata"]
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["filter"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "MessageVariables": {
    "type": "object",
    "properties": {
      "id": { "description": "The ID for the message.", "type": "string" },
      "authorID": {
        "description": "The ID for the user that sent the message.",
        "type": "string"
      },
      "organizationID": {
        "description": "The ID for the organization this message belongs to.",
        "type": "string"
      },
      "threadID": {
        "description": "The ID for the thread this message is part of.",
        "type": "string"
      },
      "content": {
        "description": "The content of the message.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        }
      },
      "url": {
        "description": "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.",
        "type": ["null", "string"]
      },
      "createdTimestamp": {
        "description": "The timestamp when this message was created.  The default value is the\ncurrent time.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "deletedTimestamp": {
        "description": "The timestamp when this message was deleted, if it was.  If unset, the\nmessage is not deleted.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "updatedTimestamp": {
        "description": "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "iconURL": {
        "description": "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "type": {
        "description": "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.",
        "enum": ["action_message", "user_message"],
        "type": "string"
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "id",
      "authorID",
      "organizationID",
      "threadID",
      "content",
      "url",
      "createdTimestamp",
      "deletedTimestamp",
      "updatedTimestamp",
      "iconURL",
      "type",
      "metadata"
    ],
    "required": [
      "authorID",
      "content",
      "createdTimestamp",
      "deletedTimestamp",
      "iconURL",
      "id",
      "metadata",
      "organizationID",
      "threadID",
      "type",
      "updatedTimestamp",
      "url"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreateMessageVariables": {
    "type": "object",
    "properties": {
      "createThread": {
        "description": "The parameters for creating a thread if the supplied thread doesn't exist\nyet.  If the thread doesn't exist but `createThread` isn't provided, the\ncall will generate an error.  This value is ignored if the thread already\nexists.",
        "$ref": "#/definitions/Omit<CreateThreadVariables,\"id\">"
      },
      "id": { "description": "The ID for the message.", "type": "string" },
      "content": {
        "description": "The content of the message.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        }
      },
      "authorID": {
        "description": "The ID for the user that sent the message.",
        "type": "string"
      },
      "type": {
        "description": "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.",
        "enum": ["action_message", "user_message"],
        "type": "string"
      },
      "url": {
        "description": "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.",
        "type": ["null", "string"]
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "iconURL": {
        "description": "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "createdTimestamp": {
        "description": "The timestamp when this message was created.  The default value is the\ncurrent time.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "deletedTimestamp": {
        "description": "The timestamp when this message was deleted, if it was.  If unset, the\nmessage is not deleted.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "updatedTimestamp": {
        "description": "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "createThread",
      "id",
      "content",
      "authorID",
      "type",
      "url",
      "metadata",
      "iconURL",
      "createdTimestamp",
      "deletedTimestamp",
      "updatedTimestamp"
    ],
    "required": ["authorID", "content", "id"],
    "definitions": {
      "Omit<CreateThreadVariables,\"id\">": {
        "type": "object",
        "properties": {
          "location": {
            "description": "The [location](/reference/location) of this thread.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          },
          "url": {
            "description": "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.",
            "type": "string"
          },
          "name": {
            "description": "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.",
            "type": "string"
          },
          "metadata": {
            "description": "Arbitrary key-value pairs that can be used to store additional information.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          },
          "organizationID": {
            "description": "The organization ID this thread is in.",
            "type": "string"
          },
          "typing": {
            "description": "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "additionalProperties": false,
        "propertyOrder": [
          "location",
          "url",
          "name",
          "metadata",
          "organizationID",
          "typing"
        ],
        "required": ["location", "name", "organizationID", "url"]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateMessageVariables": {
    "type": "object",
    "properties": {
      "deleted": {
        "description": "Whether we want to mark this message as deleted. Setting this to `true` without\nproviding a value for `deletedTimestamp` is equivalent to setting `deletedTimestamp` to current\ntime and setting this to `false` is equivalent to setting `deletedTimestamp` to `null`.",
        "type": "boolean"
      },
      "deletedTimestamp": {
        "description": "The timestamp when this message was deleted, if it was. If set to null, the message is not deleted.\nDeleting a message this way will only soft delete it, replacing the content of the message with a\nrecord of the deletion on the frontend. If you'd like to permanently delete it instead, use the\n[delete message endpoint](/reference/rest-api/messages#Delete-a-message).",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "type": {
        "description": "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.",
        "enum": ["action_message", "user_message"],
        "type": "string"
      },
      "id": { "description": "The ID for the message.", "type": "string" },
      "url": {
        "description": "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.",
        "type": ["null", "string"]
      },
      "content": {
        "description": "The content of the message.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        }
      },
      "metadata": {
        "description": "Arbitrary key-value pairs that can be used to store additional information.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "iconURL": {
        "description": "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.",
        "format": "uri",
        "type": ["null", "string"]
      },
      "authorID": {
        "description": "The ID for the user that sent the message.",
        "type": "string"
      },
      "createdTimestamp": {
        "description": "The timestamp when this message was created.  The default value is the\ncurrent time.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      },
      "updatedTimestamp": {
        "description": "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.",
        "anyOf": [
          { "type": "string", "format": "date-time" },
          { "type": "null" }
        ]
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "deleted",
      "deletedTimestamp",
      "type",
      "id",
      "url",
      "content",
      "metadata",
      "iconURL",
      "authorID",
      "createdTimestamp",
      "updatedTimestamp"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ListMessageParameters": {
    "type": "object",
    "properties": {
      "sortDirection": {
        "description": "Return messages in ascending or descending order of creation timestamp.  'descending' is the default.",
        "enum": ["ascending", "descending"],
        "type": "string"
      }
    },
    "additionalProperties": false,
    "propertyOrder": ["sortDirection"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CreateNotificationVariables": {
    "description": "https://docs.cord.com/reference/rest-api/notifications",
    "type": "object",
    "properties": {
      "actorID": {
        "description": "ID of user who is the \"actor\" sending the notification, i.e., the user\ntaking the action the notification is about.\n\nRequired if `template` includes `{{actor}}`.",
        "type": "string"
      },
      "actor_id": { "type": "string" },
      "recipientID": {
        "description": "ID of user receiving the notification.",
        "type": "string"
      },
      "recipient_id": { "type": "string" },
      "template": {
        "description": "Template for the header of the notification. The expressions `{{actor}}`\nand `{{recipient}}` will be replaced respectively with the notification's\nactor and recipient. (See below for an example.)",
        "type": "string"
      },
      "url": {
        "description": "URL of page to go to when the notification is clicked.",
        "type": "string"
      },
      "iconUrl": {
        "description": "URL of an icon image if a specific one is desired. For notifications with\nan `actor_id` this will default to the sender's profile picture, otherwise\nit will default to a bell icon.",
        "type": "string"
      },
      "type": {
        "description": "Currently must be set to `url`. In the future this may specify different\ntypes of notifications, but for now only `url` is defined.",
        "type": "string",
        "enum": ["url"]
      },
      "metadata": {
        "description": "An arbitrary JSON object that can be used to set additional metadata on the\nnotification. When displaying a [list of\nnotifications](/components/cord-notification-list),\nyou can filter the list by metadata value.\n\nKeys are strings, and values can be strings, numbers or booleans.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "actorID",
      "actor_id",
      "recipientID",
      "recipient_id",
      "template",
      "url",
      "iconUrl",
      "type",
      "metadata"
    ],
    "required": ["template", "type", "url"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NotificationVariables": {
    "type": "object",
    "properties": {
      "id": {
        "description": "The [ID](/reference/identifiers) for this notification.",
        "type": "string"
      },
      "senderUserIDs": {
        "description": "The [IDs](/reference/identifiers) of the user(s) who\nsent this notification. The Cord backend will sometimes aggregate multiple\nnotifications together, causing them to have multiple senders. For example,\nif multiple people react to the same message, that will generate only one\nnotification (but with multiple senders, one for each person who reacted).",
        "type": "array",
        "items": { "type": "string" }
      },
      "iconUrl": {
        "description": "The URL of an icon image for this notification, if one was specified when\nit was created. This will always be `null` for Cord's internally-generated\nnotifications (i.e., it can only be non-null for notifications you create\nvia the REST API).",
        "type": ["null", "string"]
      },
      "header": {
        "description": "The \"header\" or \"text\" of the notification. This will represent text like\n\"Alice replied to your thread.\" or similar. For notifications you create\nvia the REST API, this will be based upon the `template` parameter, see\nbelow.",
        "type": "array",
        "items": {
          "anyOf": [
            {
              "description": "A header node representing a basic string.",
              "type": "object",
              "properties": {
                "text": {
                  "description": "The text to display. This text may start and/or end with whitespace, which\nshould typically *not* be trimmed. For example, in order to display the\nnotification `\"Alice replied to your thread.\"`, this would typically be\ncomposed of two nodes -- a user node for Alice, and then a text node\ncontaining `\" replied to your thread.\"`, with a meaningful space at the\nfront, to separate this node from Alice's name.",
                  "type": "string"
                },
                "bold": {
                  "description": "Whether the text should be formatted in bold.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "propertyOrder": ["text", "bold"],
              "required": ["bold", "text"]
            },
            {
              "description": "A header node representing a reference to a specific user.",
              "type": "object",
              "properties": {
                "userID": {
                  "description": "The user referenced. This node would typically be rendered by displaying\nthis user's name.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "propertyOrder": ["userID"],
              "required": ["userID"]
            }
          ]
        }
      },
      "attachment": {
        "description": "Additional context attached to the notification. For example, if this\nnotification is about a new reaction on a message, the attachment will\nspecify what message received that new reaction.",
        "anyOf": [
          {
            "description": "An attachment representing a URL.",
            "type": "object",
            "properties": {
              "url": {
                "description": "The URL this attachment points to. This would typically be the URL to send\nthe browser to if this notification is clicked.",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "propertyOrder": ["url"],
            "required": ["url"]
          },
          {
            "description": "An attachment representing a message.",
            "type": "object",
            "properties": {
              "messageID": {
                "description": "The ID of the message attached to this notification. For example, if this\nis a notification about being @-mentioned, this is the ID of the message\ncontaining that @-mention.",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "propertyOrder": ["messageID"],
            "required": ["messageID"]
          },
          { "type": "null" }
        ]
      },
      "readStatus": {
        "description": "Whether this notification has been read by the recipient yet.",
        "enum": ["read", "unread"],
        "type": "string"
      },
      "timestamp": {
        "description": "The time this notification was sent.",
        "type": "string",
        "format": "date-time"
      },
      "metadata": {
        "description": "An arbitrary JSON object specified when the notification was created. This\nwill always be an empty object for Cord's internally-generated\nnotifications (i.e., it can only be non-null for notifications you create\nvia the REST API).",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "id",
      "senderUserIDs",
      "iconUrl",
      "header",
      "attachment",
      "readStatus",
      "timestamp",
      "metadata"
    ],
    "required": [
      "attachment",
      "header",
      "iconUrl",
      "id",
      "metadata",
      "readStatus",
      "senderUserIDs",
      "timestamp"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NotificationReplyAction": {
    "enum": [
      "assign-task",
      "attach-file",
      "create-thread",
      "mention",
      "unassign-task"
    ],
    "type": "string",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateUserPresenceVariables": {
    "type": "object",
    "properties": {
      "organizationID": {
        "description": "The organization that the user belongs to.",
        "type": "string"
      },
      "exclusiveWithin": {
        "description": "Sets an \"exclusivity region\" for the ephemeral presence set by this update.\nA user can only be present at one location for a given value of exclusiveWithin.\nIf the user becomes present at a different location with the same value of\nexclusiveWithin, they automatically become no longer present at all other\nlocations with that value of exclusive_within.\nThis is useful to more easily track presence as a user moves among sub-locations.\nFor example, suppose we'd like to track which specific paragraph on a page\na user is present. We could make those updates like this:\n\n```json\n{\n   \"organizationID\": \"<ORG_ID>\",\n   \"location\": { \"page\": \"<PAGE_ID>\", \"paragraph\": \"<PARAGRAPH_ID>\" },\n   \"exclusiveWithin\": { \"page\": \"<PAGE_ID>\" }\n}\n```\n\nAs a user moves around a page, their paragraphID will change, while their\npageID will remain the same. The above call to setPresent will mark them\npresent at their specific paragraph. However, since every update uses the\nsame exclusiveWithin, each time they are marked present at one paragraph\nthey will become no longer present at their previous paragraph.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "location": {
        "description": "The [location](/reference/location) you want the user to be in.",
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "durable": {
        "description": "When `true`, this is a [durable presence](/js-apis-and-hooks/presence-api)\nupdate, when `false`, or is not used, it is an [ephemeral presence](/js-apis-and-hooks/presence-api) update.\n\nThis value defaults to `false.`",
        "type": "boolean"
      },
      "absent": {
        "description": "When `true`, this is an *absence* update, meaning that the user has just left\nthis [location](/reference/location).\nIf the user is currently present at that location, it is cleared.\nThis cannot be used with a [durable presence](/js-apis-and-hooks/presence-api) update.\n\nThis value defaults to `false.` The user will be set as present at the location.",
        "type": "boolean"
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "organizationID",
      "exclusiveWithin",
      "location",
      "durable",
      "absent"
    ],
    "required": ["location", "organizationID"],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ThreadMessageAddedPayload": {
    "type": "object",
    "properties": {
      "type": { "type": "string", "enum": ["thread-message-added"] },
      "threadID": { "type": "string" },
      "messageID": { "type": "string" },
      "orgID": { "type": "string" },
      "organizationID": { "type": "string" },
      "applicationID": { "type": "string" },
      "author": { "$ref": "#/definitions/UserData" },
      "content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {},
          "additionalProperties": true
        }
      },
      "text": { "type": "string" },
      "url": { "type": "string" },
      "usersToNotify": {
        "type": "array",
        "items": {
          "additionalProperties": false,
          "type": "object",
          "properties": {
            "id": {
              "description": "The user's ID.  This is unique within an application.",
              "type": "string"
            },
            "name": {
              "description": "The user's name.",
              "type": ["null", "string"]
            },
            "shortName": {
              "description": "The user's short name.  In most cases, Cord components will prefer using\nthis name over `name` when set.",
              "type": ["null", "string"]
            },
            "profilePictureURL": {
              "description": "A URL to the user's profile picture.",
              "type": ["null", "string"]
            },
            "metadata": {
              "description": "Any metadata that has been set for the user.",
              "type": "object",
              "additionalProperties": {
                "type": ["string", "number", "boolean"]
              },
              "propertyOrder": []
            },
            "replyActions": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/NotificationReplyAction" }
                },
                { "type": "null" }
              ]
            }
          },
          "required": [
            "id",
            "metadata",
            "name",
            "profilePictureURL",
            "replyActions",
            "shortName"
          ]
        }
      },
      "messageType": {
        "enum": ["action_message", "user_message"],
        "type": "string"
      },
      "metadata": {
        "type": "object",
        "additionalProperties": { "type": ["string", "number", "boolean"] },
        "propertyOrder": []
      },
      "thread": {
        "$ref": "#/definitions/Omit<RestApiThreadData,\"organizationID\">"
      }
    },
    "additionalProperties": false,
    "propertyOrder": [
      "type",
      "threadID",
      "messageID",
      "orgID",
      "organizationID",
      "applicationID",
      "author",
      "content",
      "text",
      "url",
      "usersToNotify",
      "messageType",
      "metadata",
      "thread"
    ],
    "required": [
      "applicationID",
      "author",
      "content",
      "messageID",
      "messageType",
      "metadata",
      "orgID",
      "organizationID",
      "text",
      "thread",
      "threadID",
      "type",
      "url",
      "usersToNotify"
    ],
    "definitions": {
      "UserData": {
        "description": "The data associated with a Cord user.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The user's ID.  This is unique within an application.",
            "type": "string"
          },
          "name": {
            "description": "The user's name.",
            "type": ["null", "string"]
          },
          "shortName": {
            "description": "The user's short name.  In most cases, Cord components will prefer using\nthis name over `name` when set.",
            "type": ["null", "string"]
          },
          "profilePictureURL": {
            "description": "A URL to the user's profile picture.",
            "type": ["null", "string"]
          },
          "metadata": {
            "description": "Any metadata that has been set for the user.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          }
        },
        "additionalProperties": false,
        "propertyOrder": [
          "id",
          "name",
          "shortName",
          "profilePictureURL",
          "metadata"
        ],
        "required": ["id", "metadata", "name", "profilePictureURL", "shortName"]
      },
      "NotificationReplyAction": {
        "enum": [
          "assign-task",
          "attach-file",
          "create-thread",
          "mention",
          "unassign-task"
        ],
        "type": "string"
      },
      "Omit<RestApiThreadData,\"organizationID\">": {
        "type": "object",
        "properties": {
          "location": {
            "description": "The [location](/reference/location) of this thread.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          },
          "id": { "description": "The ID for this thread.", "type": "string" },
          "total": {
            "description": "The total number of messages in this thread.",
            "type": "number"
          },
          "url": {
            "description": "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.",
            "type": "string"
          },
          "name": {
            "description": "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.",
            "type": "string"
          },
          "metadata": {
            "description": "Arbitrary key-value pairs that can be used to store additional information.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          },
          "resolvedTimestamp": {
            "description": "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.",
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ]
          },
          "resolved": {
            "description": "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.",
            "type": "boolean"
          },
          "participants": {
            "description": "All of the users who are subscribed to this thread.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "lastSeenTimestamp": {
                  "description": "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.",
                  "anyOf": [
                    { "type": "string", "format": "date-time" },
                    { "type": "null" }
                  ]
                },
                "userID": {
                  "description": "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).",
                  "type": ["null", "string"]
                }
              },
              "additionalProperties": false,
              "propertyOrder": ["lastSeenTimestamp", "userID"],
              "required": ["lastSeenTimestamp", "userID"]
            }
          },
          "typing": {
            "description": "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "additionalProperties": false,
        "propertyOrder": [
          "location",
          "id",
          "total",
          "url",
          "name",
          "metadata",
          "resolvedTimestamp",
          "resolved",
          "participants",
          "typing"
        ],
        "required": [
          "id",
          "location",
          "metadata",
          "name",
          "participants",
          "resolved",
          "resolvedTimestamp",
          "total",
          "typing",
          "url"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ClientAuthTokenData": {
    "description": "https://docs.cord.com/reference/authentication/",
    "additionalProperties": true,
    "type": "object",
    "properties": {
      "app_id": {
        "description": "Your app ID",
        "format": "uuid",
        "type": "string"
      },
      "user_id": {
        "$ref": "#/definitions/ID",
        "description": "The ID for the user"
      },
      "organization_id": {
        "$ref": "#/definitions/ID",
        "description": "The ID for the user’s organization"
      },
      "user_details": {
        "description": "If present, update’s the user’s details, or creates a user with those\ndetails if the user_id is new to Cord. This is an object that contains the\nsame fields as the [user management REST\nendpoint](/reference/rest-api/users/)",
        "$ref": "#/definitions/PlatformUserVariables"
      },
      "organization_details": {
        "description": "If present, update’s the organization’s details, or creates an organization\nwith those details if the organization_id is new to Cord. This is an object\nthat contains the same fields as the [organization management REST\nendpoint](/reference/rest-api/organizations/)",
        "$ref": "#/definitions/PlatformOrganizationVariables"
      }
    },
    "propertyOrder": [
      "app_id",
      "user_id",
      "organization_id",
      "user_details",
      "organization_details"
    ],
    "required": ["app_id", "organization_id", "user_id"],
    "definitions": {
      "ID": { "minLength": 1, "maxLength": 128, "type": ["string", "number"] },
      "PlatformUserVariables": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email address",
            "format": "email",
            "type": "string"
          },
          "name": { "description": "Full user name", "type": "string" },
          "shortName": {
            "description": "Short user name. In most cases, this will be preferred over name when set.",
            "type": "string"
          },
          "short_name": { "type": "string" },
          "status": { "enum": ["active", "deleted"], "type": "string" },
          "profilePictureURL": {
            "description": "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.",
            "format": "uri",
            "type": ["null", "string"]
          },
          "profile_picture_url": {
            "format": "uri",
            "type": ["null", "string"]
          },
          "first_name": {
            "description": "User's first name. This field is deprecated and has no effect.",
            "type": "string"
          },
          "last_name": {
            "description": "User's last name. This field is deprecated and has no effect.",
            "type": "string"
          },
          "metadata": {
            "description": "Arbitrary key-value pairs that can be used to store additional information.",
            "type": "object",
            "additionalProperties": { "type": ["string", "number", "boolean"] },
            "propertyOrder": []
          }
        },
        "additionalProperties": false,
        "propertyOrder": [
          "email",
          "name",
          "shortName",
          "short_name",
          "status",
          "profilePictureURL",
          "profile_picture_url",
          "first_name",
          "last_name",
          "metadata"
        ],
        "required": ["email"]
      },
      "PlatformOrganizationVariables": {
        "type": "object",
        "properties": {
          "name": { "description": "Organization name", "type": "string" },
          "status": { "enum": ["active", "deleted"], "type": "string" },
          "members": {
            "description": "List of partner-specific IDs of the users who are members of this organization",
            "type": "array",
            "items": { "type": ["string", "number"] }
          }
        },
        "additionalProperties": false,
        "propertyOrder": ["name", "status", "members"],
        "required": ["name"]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  }
}
